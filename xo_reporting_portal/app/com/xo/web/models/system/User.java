package com.xo.web.models.system;

// Generated 22-Oct-2014 01:24:44 by Hibernate Tools 4.3.1

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.apache.commons.lang3.builder.HashCodeBuilder;

import com.xo.web.audit.Auditable;
import com.xo.web.util.XoUtil;
import com.xo.web.viewdtos.KeyValueDTO;
/**
 * User generated by hbm2java
 */
@SuppressWarnings("serial")
@Auditable
public class User extends AbstractEntity {

	private Integer userId;
	private String firstName;
	private String secondName;
	private String email;
	private String password;
	private boolean superUser;
	private boolean isEmailVerified;
	private Date lastLoginDt;
	private XoClient xoClient;
	private Set<UserRole> userRoles = new HashSet<UserRole>(0);
	private Set<TokenAction> tokenActions = new HashSet<TokenAction>(0);
	private Set<UserPermission> userPermissions = new HashSet<UserPermission>(0);

	public User() {
	}

	public User(String firstName, String secondName, String email) {
		this.firstName = firstName;
		this.secondName = secondName;
		this.email = email;
	}

	public Integer getUserId() {
		return this.userId;
	}

	public void setUserId(Integer id) {
		this.userId = id;
	}

	public String getFirstName() {
		return this.firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	public String getSecondName() {
		return this.secondName;
	}

	public void setSecondName(String secondName) {
		this.secondName = secondName;
	}

	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public boolean isIsEmailVerified() {
		return this.isEmailVerified;
	}

	public void setIsEmailVerified(boolean isEmailVerified) {
		this.isEmailVerified = isEmailVerified;
	}

	public Date getLastLoginDt() {
		return this.lastLoginDt;
	}

	public void setLastLoginDt(Date lastLoginDt) {
		this.lastLoginDt = lastLoginDt;
	}

	public Set<UserRole> getUserRoles() {
		return this.userRoles;
	}

	public void setUserRoles(Set<UserRole> usersRoleses) {
		this.userRoles = usersRoleses;
	}

	public Set<TokenAction> getTokenActions() {
		return this.tokenActions;
	}

	public void setTokenActions(Set<TokenAction> tokenActionses) {
		this.tokenActions = tokenActionses;
	}

	public Set<UserPermission> getUsersPermissions() {
		return this.userPermissions;
	}

	public void setUsersPermissions(Set<UserPermission> usersPermissionses) {
		this.userPermissions = usersPermissionses;
	}
	
	@Override
    public int hashCode() {
		return new HashCodeBuilder().append(this.userId).
				append(this.firstName).
				append(this.secondName).
				append(this.email).
				append(this.systemResource).
				append(this.active).toHashCode();
    }

    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the userId fields are not set
        if (!(object instanceof User)) {
            return false;
        }
        User other = (User) object;
        if ((this.userId == null && other.userId != null) || (this.userId != null && !this.userId.equals(other.userId))) {
            return false;
        }
        if ((this.email == null && other.email != null) || (this.email != null && !this.email.equals(other.email))) {
            return false;
        }
        return true;
    }

    public String toString() {
        return this.firstName + " " + this.secondName;
    }

    public KeyValueDTO asKeyValue() {
		return new KeyValueDTO(this.userId, this.toString());
	}

	public List<? extends Permission> getPermissions() {
		List<Permission> permissions = new ArrayList<Permission>();
		Set<Permission> permissionsSet = new HashSet<Permission>();

		// Processing the role's resource level permissions
		if(XoUtil.hasData(this.userRoles)) {
			for(UserRole userRole : userRoles) {
				Set<RolePermission> rolePermissions = userRole.getRole().getRolePermissions();
				if(XoUtil.hasData(rolePermissions)) {
					for(RolePermission rolePermission : rolePermissions) {
						if(rolePermission.isActive()) {
							if(rolePermission.getRole().isActive()) {
								final Permission tempPermission = rolePermission.getPermission();
								if(tempPermission.isActive()) {
									permissionsSet.add(tempPermission);
								}
							}
						}
					}
				}
			}
		}

		// Processing the user's additional resource level permissions
		if(XoUtil.hasData(this.userPermissions)) {
			for(UserPermission userPermission : userPermissions) {
				if(userPermission.isActive()) {
					com.xo.web.models.system.Permission tempPermission = userPermission.getPermission();
					if(!permissionsSet.contains(tempPermission)) {	// Adding the additional permissions apart from role.
						if(tempPermission.isActive()) {
							permissionsSet.add(tempPermission);
						}
					} else {
						if(!userPermission.isActive()) {	// Removing the existing permissions if it is set to inactive
							permissionsSet.remove(tempPermission);
						}
					}
				}
			}
		}
		permissions.addAll(permissionsSet);
		return permissions;
	}

	public List<? extends Role> getRoles() {
		List<com.xo.web.models.system.Role> roles = new ArrayList<com.xo.web.models.system.Role>();
		if(XoUtil.hasData(this.userRoles)) {
			for(UserRole userRole : userRoles) {
				roles.add(userRole.getRole());
			}
		}
		return roles;
	}

	public Set<String> getMyRoleNames() {
		Set<String> tempRoleNames = new HashSet<String>();
		List<? extends Role> roles = getRoles();
		if(XoUtil.hasData(roles)) {
			for(Role usersRole : roles) {
				tempRoleNames.add(usersRole.getName());
			}
		}
		return tempRoleNames;
	}

	public Set<PermissionEnum> getPermissionEnums() {
		List<? extends Permission> permissions = getPermissions();
		Set<PermissionEnum> permissionNames = new HashSet<PermissionEnum>();
		if(XoUtil.hasData(permissions)) {
			for(Permission permission : permissions) {
				permissionNames.add(PermissionEnum.valueOf(permission.getName()));
			}
		}
		return permissionNames;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public boolean isSuperUser() {
		return superUser;
	}

	public void setSuperUser(boolean superUser) {
		this.superUser = superUser;
	}

	public XoClient getXoClient() {
		return xoClient;
	}

	public void setXoClient(XoClient xoClient) {
		this.xoClient = xoClient;
	}

}
